{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { TimeSpan } from 'src/app/tools/timeSpan';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"src/app/shared/service/sectionSchedule.service\";\nimport * as i4 from \"src/app/shared/service/log.service\";\nimport * as i5 from \"@angular/common\";\n\nfunction AddEditSectionScheduleComponent_h1_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1, \"Add section schedule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_h1_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"h1\");\n    i0.ɵɵtext(1, \"Edit section schedule\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Start hour is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_6_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Value is not correct\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, AddEditSectionScheduleComponent_div_6_div_1_Template, 2, 0, \"div\", 0);\n    i0.ɵɵtemplate(2, AddEditSectionScheduleComponent_div_6_div_2_Template, 2, 0, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.startHour.errors.reqiired);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.f.startHour.hasError(\"notCorrect\"));\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"End hour is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Value is not correct\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction AddEditSectionScheduleComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, AddEditSectionScheduleComponent_div_9_div_1_Template, 2, 0, \"div\", 0);\n    i0.ɵɵtemplate(2, AddEditSectionScheduleComponent_div_9_div_2_Template, 2, 0, \"div\", 0);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.endHour.errors.reqiired);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.f.endHour.hasError(\"notCorrect\"));\n  }\n}\n\nfunction AddEditSectionScheduleComponent_span_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 11);\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\n\nexport let AddEditSectionScheduleComponent = /*#__PURE__*/(() => {\n  class AddEditSectionScheduleComponent {\n    constructor(formBuilder, route, router, sectionScheduleService, logger) {\n      this.formBuilder = formBuilder;\n      this.route = route;\n      this.router = router;\n      this.sectionScheduleService = sectionScheduleService;\n      this.logger = logger;\n      this.form = new FormGroup({\n        startHour: new FormControl(''),\n        endHour: new FormControl('')\n      });\n      this.loading = false;\n      this.submitted = false;\n    }\n\n    ngOnInit() {\n      this.id = +history.state.id;\n      this.sectionId = +history.state.sectionId;\n      this.isAddMode = !this.id;\n\n      if (!this.isAddMode) {\n        this.startHour = history.state.startHour;\n        this.endHour = history.state.endHour;\n      }\n\n      this.form = this.formBuilder.group({\n        startHour: [this.isAddMode ? '' : TimeSpan.toStringValue(this.startHour), Validators.required],\n        endHour: [this.isAddMode ? '' : TimeSpan.toStringValue(this.endHour), Validators.required]\n      }, {\n        validator: this.checkHours('startHour', 'endHour')\n      });\n    }\n\n    checkHours(startHourField, endHourField) {\n      return group => {\n        const startHourContorl = group.controls[startHourField];\n        const endHourContorl = group.controls[endHourField];\n        const startHoursAndMinutes = startHourContorl.value.split(':');\n        const endHoursAndMinutes = endHourContorl.value.split(':');\n\n        if (startHoursAndMinutes[0] > endHoursAndMinutes[0]) {\n          return startHourContorl.setErrors({\n            notCorrect: true\n          });\n        } else if (startHoursAndMinutes[0] == endHoursAndMinutes[0]) {\n          if (startHoursAndMinutes[1] > endHoursAndMinutes[1]) return startHourContorl.setErrors({\n            notCorrect: true\n          });\n          if (startHoursAndMinutes[1] == endHoursAndMinutes[1]) return endHourContorl.setErrors({\n            notCorrect: true\n          });\n        }\n\n        return startHourContorl.setErrors(null);\n      };\n    }\n\n    get f() {\n      return this.form.controls;\n    }\n\n    onSubmit() {\n      this.submitted = true;\n\n      if (this.form.invalid) {\n        return;\n      }\n\n      this.loading = true;\n\n      if (this.isAddMode) {\n        this.createSectionSchedule();\n      } else {\n        this.updateSectionSchedule();\n      }\n    }\n\n    createSectionSchedule() {\n      this.sectionScheduleService.add(this.sectionId, TimeSpan.FromStringToTimeSpan(this.f.startHour.value).TotalSeconds, TimeSpan.FromStringToTimeSpan(this.f.endHour.value).TotalSeconds).subscribe(result => {\n        this.router.navigate(['section-schedules-page']);\n      });\n    }\n\n    updateSectionSchedule() {\n      this.sectionScheduleService.update(this.id, this.sectionId, TimeSpan.FromStringToTimeSpan(this.f.startHour.value).TotalSeconds, TimeSpan.FromStringToTimeSpan(this.f.endHour.value).TotalSeconds).subscribe(result => {\n        this.router.navigate(['section-schedules-page']);\n      });\n    }\n\n  }\n\n  AddEditSectionScheduleComponent.ɵfac = function AddEditSectionScheduleComponent_Factory(t) {\n    return new (t || AddEditSectionScheduleComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.SectionScheduleService), i0.ɵɵdirectiveInject(i4.LogService));\n  };\n\n  AddEditSectionScheduleComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AddEditSectionScheduleComponent,\n    selectors: [[\"ng-component\"]],\n    decls: 16,\n    vars: 13,\n    consts: [[4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"form-row\"], [1, \"form-group\"], [\"type\", \"time\", \"formControlName\", \"startHour\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"time\", \"formControlName\", \"endHour\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm mr-1\", 4, \"ngIf\"], [\"routerLink\", \"/section-schedules-page\", 1, \"btn\", \"btn-link\"], [1, \"invalid-feedback\"], [1, \"spinner-border\", \"spinner-border-sm\", \"mr-1\"]],\n    template: function AddEditSectionScheduleComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, AddEditSectionScheduleComponent_h1_0_Template, 2, 0, \"h1\", 0);\n        i0.ɵɵtemplate(1, AddEditSectionScheduleComponent_h1_1_Template, 2, 0, \"h1\", 0);\n        i0.ɵɵelementStart(2, \"form\", 1);\n        i0.ɵɵlistener(\"ngSubmit\", function AddEditSectionScheduleComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 2)(4, \"div\", 3);\n        i0.ɵɵelement(5, \"input\", 4);\n        i0.ɵɵtemplate(6, AddEditSectionScheduleComponent_div_6_Template, 3, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 3);\n        i0.ɵɵelement(8, \"input\", 6);\n        i0.ɵɵtemplate(9, AddEditSectionScheduleComponent_div_9_Template, 3, 2, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 3)(11, \"button\", 7);\n        i0.ɵɵtemplate(12, AddEditSectionScheduleComponent_span_12_Template, 1, 0, \"span\", 8);\n        i0.ɵɵtext(13, \" Save \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"a\", 9);\n        i0.ɵɵtext(15, \"Cancel\");\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.isAddMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.isAddMode);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.submitted && ctx.f.startHour.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.startHour.errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.submitted && ctx.f.endHour.errors));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.endHour.errors);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", ctx.loading);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLinkWithHref],\n    encapsulation: 2\n  });\n  return AddEditSectionScheduleComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}